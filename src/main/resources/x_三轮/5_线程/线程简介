1、进程与线程
一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。
线程是在进程中执行的一个任务，一个进程可以包含多个线程

2、并行与并发
并行：多个cpu实例或者多台机器同时执行一段处理逻辑，是真正的同时。
并发：通过cpu调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时。
并发往往在场景中有公用的资源，那么针对这个公用的资源往往产生瓶颈，
我们会用TPS或者QPS来反应这个系统的处理能力。

2、时间片算法和抢占式算法
unix使用时间片算法 windows使用抢占式算法
时间片算法 每个进程分配一个时间段(时间片)，时间结束后剥夺cpu使用权分给下一个进程，改进程在排在队列末尾(时间片结束前阻塞或完成都会导致切换)
抢占式算法
给优先级最高的进程分配cpu 如果出现更高优先级的则分配cpu给最高优先级进程

3、上下文切换
时间片算法中 任务执行完时间片后切换到另一个任务前会保存该任务的状态知道下一次切换回该任务 从任务保存到再次加载的过程叫做上下文切换

4、用户线程和守护线程
守护线程指的是后台提供的一种通用服务(例如：gc线程)
用户线程是指 我们在jvm中创建的线程 叫做用户线程

5、创建线程
a、集成Thread
b、实现Runnable
c、实现Callable
d、线程池创建

6、线程生命周期
新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）和死亡（Dead）5种状态。

新建 new Thread()
就绪 Thread.start() 进入就绪状态 等待cpu分配使用权
运行 就绪状态的线程获得cpu使用权进入运行状态 通过thread.yield()回到就绪状态
阻塞 synchronized中wait 或者Thread.sleep Thread.join 运行-》阻塞，阻塞完之后回到就绪状态等待cpu分配使用权
死亡 run结束或者异常退出

wait和notify
线程进入同步代码块获得锁，调用wait() 释放锁，进入同步队列，别的线程通过cpu调用执行notify后释放锁 重新让其他线程争夺cpu使用权
wait和sleep
wait释放锁，sleep持有锁

join
在A线程中调用B的join() 将A线程阻塞，等B执行完后在唤醒A
yield

sleep和sleep(0)
操作系统中，CPU竞争有很多种策略。Unix系统使用的是时间片算法，而Windows则属于抢占式的。
    Thread.Sleep(0)的作用，就是“触发操作系统立刻重新进行一次CPU竞争”。
    sleep(n)在n秒内不会参与CPU竞争


并发的安全性: 必须要保证原子性、可见性以及有序性
线程安全的实现
1、同步和锁
2、使用原子类
3、volatile
4、线程安全类和不变类