synchronized
每个对象有一个监视器锁(monitor)
当monitor被占用时就会处于锁定状态
线程进入synchronized代码块时尝试获取monitor的所有权(计算器底层执行monitorenter命令)
1、如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。
2、如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1.
3.如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。
线程离开synchronized代码块时(计算器底层执行monitorexit命令)
指令执行时，monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。
其他被这个monitor阻塞的线程可以尝试去获取这个 monitor 的所有权。


lock
ReentrantLock
ReentrantReadWriteLock(ReadLock,WriteLock)






synchronized和lock比较
1、底层实现
2、