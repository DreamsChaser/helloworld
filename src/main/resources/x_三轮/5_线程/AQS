ReentrantLock实现的前提就是AbstractQueuedSynchronizer，简称AQS
AQS是基于FIFO(先入先出)队列的实现

内部类Node
static final Node SHARED = new Node(); 表示Node处于共享模式
static final Node EXCLUSIVE = null; 表示Node处于独占模式
int CANCELLED = 1
因为超时或者中断，Node被设置为取消状态，被取消的Node不应该去竞争锁，只能保持取消状态不变，不能转换为其他状态，
处于这种状态的Node会被踢出队列，被GC回收
int SIGNAL = -1
表示这个Node的继任Node被阻塞了，到时需要通知它
int CONDITION = -2
表示这个Node在条件队列中，因为等待某个条件而被阻塞
int PROPAGATE = -3
使用在共享模式头Node有可能处于这种状态， 表示锁的下一次获取可以无条件传播
int waitStatus
0，新Node会处于这种状态

Node prev Node next
Thread thread 当前Node持有的线程
Node nextWaiter 表示下一个等待condition的Node
