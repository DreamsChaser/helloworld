抽象类Sync
根据传入构造方法的布尔型参数实例化出Sync的实现类FairSync和NonfairSync(公平锁和非公平锁)

lock():
非公平锁:线程1调用ReentrantLock的lock()
NonfairSync.lock()->AbstractQueueSynchronized.compareAndSetState(0,1)
->AbstractOwnableSynchronizer.setExclusiveOwnerThread(Thread.currentThread)

线程2调用ReentrantLock的lock() CAS判断失败acquire(1)
public final void acquire(int arg) {
    if (!tryAcquire(arg) &&
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        selfInterrupt();
}
尝试获取一次锁失败则添加FIFO等待队列
addWaiter:
    先创建一个当前线程的Node，模式为独占模式（因为传入的mode是一个NULL），
    再判断一下队列上有没有节点，没有就创建一个队列，因此走enq方法：


unlock():
    sync.release(1);

    public final boolean release(int arg) {
        if (tryRelease(arg)) {
            Node h = head;
            if (h != null && h.waitStatus != 0)
               unparkSuccessor(h);
            return true;
        }
        return false;
    }
先调用Sync的tryRelease尝试释放锁