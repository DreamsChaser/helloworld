偏向锁
轻量级锁
重量级锁
锁粗化
锁消除

被锁对象有个状态标志位，
-XX:+UseBiasedLocking开启偏向锁
锁对象第一次被线程获取时，设置为01(偏向锁)，同时用cas方式设置线程id
如果成功，以后这个线程进入这个锁相关的代码块时，不进行同步操作
当另一个线程获取该锁时，偏向锁恢复成未锁定或者轻量级锁
判断是否有两个以上的线程竞争，是则膨胀为重量级锁

锁消除
jvm检测到一些


自旋锁
利用while和cas设置锁好处不会阻塞引起上下文的切换
缺点：同步时间太长会导致cpu消耗高

锁分离


总结：锁分为四种状态 无锁、偏向、轻量级锁、重量级锁，锁的状态保持在对象的头文件中
当线程进入同步代码块，判断锁的状态是否为无锁 无锁则cas修改无锁-》轻量级锁 01-》00
修改失败则判断当前线程是否有锁，有则重入，无则说明有竞争膨胀为重量级锁 00-》10
并且当前线程通过自旋获取锁
