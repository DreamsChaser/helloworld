进程与线程
一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。
线程是在进程中执行的一个任务，一个进程可以包含多个线程

CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再次加载这个任务的状态，从任务保存到再加载的过程就是一次上下文切换。

用户线程和守护线程
当我们在Java程序中创建一个线程，它就被称为用户线程
守护线程列如（GC线程） 守护线程是指在程序运行的时候在后台提供一种通用服务的线程

创建线程
1）继承Thread类创建线程 创建Thread子类的实例，也就是创建了线程对象
2）实现Runnable接口创建线程 创建Runnable实现类的实例，并用这个实例作为Thread的target来创建Thread对象，这个Thread对象才是真正的线程对象
3）使用Callable和Future创建线程  通过调用线程对象的start()方法来启动线程

线程的生命周期：新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）和死亡（Dead）5种状态。

1、新建状态(new)：new Thread()
2、线程位于可运行线程池中，等待线程调度，获取cpu使用权(ready):
   thread.start()或者thread.yield();
3、获取到cpu时间片变成运行状态(running)
4、阻塞状态 blocked:
    在synchronized中wait()
    Thread.sleep(); thread.join()
wait与notify线程获取锁后 wait()释放锁进入 同步队列，别的线程获取cpu调度执行notify后唤醒该线程，重新争夺cpu调度
join 在A线程中调用B的join() 将A线程阻塞，等B执行完后在唤醒A
!!!!!yield方法不能用于交替执行线程


并发程序正确地执行，必须要保证原子性、可见性以及有序性
线程安全的实现
1、同步和锁
2、使用原子类
3、volatile
4、线程安全类和不变类

