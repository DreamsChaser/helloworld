AbstractQueuedSynchronizer（AQS）
    数据结构：volatile int state（代表共享资源）（0表示未锁定）
              FIFO线程等待队列（多线程争用资源被阻塞时会进入此队列）
    AQS定义两种资源共享方式 独占share和共享Exclusive
主要方法
acquire(int)独占模式下线程获取共享资源，如果获取到资源，线程直接返回，否则进入等待队列，直到获取到资源为止
    public final void acquire(int arg) {
        if (!tryAcquire(arg) &&
            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
    }
    1、如果获取到资源，线程直接返回
    2、没有获取到执行addWaiter(Node.EXCLUSIVE),  arg)进入等待队列，自旋cas存入队尾
    3、acquireQueued在等待队列中获取资源

release(int)独占模式下线程释放共享资源,state=0,它会唤醒等待队列里的其他线程来获取资源
 public final boolean release(int arg) {
     if (tryRelease(arg)) {
         Node h = head;//找到头结点
         if (h != null && h.waitStatus != 0)
             unparkSuccessor(h);//唤醒等待队列里的下一个线程
         return true;
     }
     return false;
 }

acquireShared(int)共享模式下线程获取共享资源
    就是自己苏醒的同时，如果条件符合（比如还有剩余资源），还会去唤醒后继结点，
releaseShared()
    释放掉资源后，唤醒后继