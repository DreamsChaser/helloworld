对null的处理
hashMap 内部结构
Node[] table
Node int hash(即key的hash值，hash值相同的key存放在统一数组下标的不同链表) key,value,Node next
默认长度16 默认负载因子0.75
当size>极限键值对16*0.75=12时扩容
put(如果key是null那么hash算法后的值就是0,因为key为0和null是存放的数组下标一致，hash碰撞)
1、计算key的hash值（hashcode右移16异或hashcode）-》putVal
    判断Node[]是否为空，空则resize
2、计算数组下标位置i = hash&(length-1)
3、判断Node p = tab[i]的Node是否为null
null-> tab[i] = newNode(hash, key, value, null); 判断是否需要扩容
不为null
判断p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k))))
即判断hash== ,key==或者equals
相等则Node e = p; 最后覆盖value,判断扩容
不相等（即可能hash碰撞）
    循环判断p.next==null 为空则break直接 p.next=newNode
                     不为空则判断p.next的hash==，key==或者equals如果就符合条件的Node e就break,覆盖e的value，判断扩容


resize
newCap = oldCap << 1 长度扩容一倍 (长度为元长度*2，length-1在扩容前后的变化就转化成二进制高位多1bit，
确定下标运算为hash&length-1可得扩容后的位置要么不变要么原位置+元长度（左边多1bit）这样只需知道hash多出的一位是1还是0就可以)
newThr = oldThr << 1 极限键值对扩容一倍
定义固定长度的数组Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];
遍历旧的Node[] oldTab
得到oldTab[i]判断是否为null null则继续遍历 不为null则先置空oldTab[j] = null;
判断是否是单个Node if(e.next == null) 是则newTab[e.hash & (newCap - 1)] = e;
如果该Node有next 则链表赋值 Node<K,V> loHead = null, loTail = null;Node<K,V> hiHead = null, hiTail = null;
     if ((e.hash & oldCap) == 0) hash值多出的那一位是0位置不变

 newTab[j] = loHead;
 newTab[j + oldCap] = hiHead;


 1.7的resize
 do {
     Entry<K, V> next = e.next;
     int i = indexFor(e.hash, newCapacity); //！！重新计算每个元素在数组中的位置  (取余运算)
     e.next = newTable[i]; //标记[1]
     newTable[i] = e;      //将元素放在数组上
     e = next;             //访问下一个Entry链上的元素
 } while (e != null);
