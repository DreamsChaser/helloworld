底层是数组+链表+红黑树
    静态内部类node
    final int hash //用来定位数组索引位置
    final K key
    V value
    Node<K,V> next  //链表的下一个node
hashmap
    Node[] table哈希桶数组 Node是个键值对
    int threshold;所能容纳的key-value对极限 threshold = length(node数组长度) * Load factor 超过这个数目就重新resize
    final float loadFactor;    // 负载因子
    int modCount; 而modCount字段主要用来记录HashMap内部结构发生变化的次数(key不变value变则不属于结构变化)
    int size; HashMap中实际存在的键值对数量

    //确定哈希桶数组索引位置,扰动函数
    int hash(Object key){
         int h;
         return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);(右移16位然后异或)
    }
    key的hashCode值返回int型是个-2^31 2^31的，一般情况下很少发生碰撞，对数组长度取模，h&(length-1) 长度选2次幂这样是个低位掩码，每次取后几位，但这样碰撞会很严重
    int32bit 右移16位 高8位低8位异或 保证hash碰撞
    取模算法：hash&(length-1)
    rehash链表反转


    //put
    1.判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；
    ②.根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③；
    ③.判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；
    ④.判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；
    ⑤.遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；
    ⑥.插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。

    //resize
    长度为0是的第一次扩容，数组长度为16，极限键值对为16*负载因子=16*0.75=12
    以后除了到达最大值的扩容都是数组长度扩容为2倍，极限键值对也扩容为2倍
    创建一个新的node数组
    循环数组将非空元素赋值，链表只有一个也是直接赋值，否则进行链表复制，没有计算位置，而是采用了原始位置加原数组长度的方法计算得到位置
    多线程下的问题 线程1插入数据，判断为链表，线程阻塞，线程2插入数据判断》8，构造红黑树，线程1恢复插入数据报错 类型转化错误！
    多线程下的数据丢失 在扩容时赋值数组， 会先判断数组上的值是否为空，不为空则置为空在赋值，这时候另一个线程则判断不了。