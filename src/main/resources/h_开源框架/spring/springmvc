web.xml配置了listener
服务部署是，调用监听器的ContextLoaderListener.contextInitialized()，在这个方法里通过createWebApplicationContext(servletContext);声明一个WebApplicationContext并赋值给ServletContext的org.springframework.web.context.WebApplicationContext.ROOT属性，作为WebApplicationContext的根上下文（root context）。
这里是DispatcherServlet的父上下文（即为spring容器）
DispatcherServlet在初始化的过程中，会建立一个自己的IoC容器上下文Servlet WebApplicationContext并把上面的容器作为父容器
init() 在FrameworkServlet实现
    PropertyValues：
    BeanWrapper
    ResourceLoader
    先通过PropertyValues获取web.xml文件init-param的参数值，然后通过ResourceLoader读取.xml配置信息，BeanWrapper对配置的标签进行解析和将系统默认的bean的各种属性设置到对应的bean属性。
    initWebApplicationContext 初始化SpringMVC 上下文容器，并作为值放到了ServletContext里 启动createWebApplicationContext()方法


springmvc拦截器：实现    HandlerInterceptor


总结
dispatcherServlet : 继承关系HttpServletBean   将web.xml中配置的参数设置到Servlet中。比如servlet标签的子标签init-param标签中配置的参数
                            FrameworkServlet 会建立一个自己的IoC容器上下文Servlet WebApplicationContext并把上面的容器作为父容器
                            处理请求映射

拦截请求首先根据请求的路径  找到HandlerMethod(带有Method反射属性，也就是对应Controller中的方法)，然后匹配路径对应的拦截器，
有了HandlerMethod和拦截器构造个HandlerExecutionChain对象。
HandlerExecutionChain对象的获取是通过HandlerMapping接口提供的方法中得到。有了HandlerExecutionChain之后，
通过HandlerAdapter对象进行处理得到ModelAndView对象，
HandlerMethod内部handle的时候，使用各种HandlerMethodArgumentResolver实现类处理HandlerMethod的参数，
使用各种HandlerMethodReturnValueHandler实现类处理返回值。 最终返回值被处理成ModelAndView对象，这期间发生的异常会被HandlerExceptionResolver接口实现类进行处理。

获得处理请求的handler，返回HandlerExecutionChain
获得处理请求的handler adapter
实际调用handler，返回ModelAndView
调用ViewResolver进行视图解析
渲染视图