分布式 集群 高并发 多线程 负载均衡
背景：某一系统达到100W次/每秒 当前机器硬件上允许最多50W
1、提升硬件
2、水平扩展 垂直拆分
水平扩展 按照上述例子， 增加机器，同时保证请求的平均分配（通过负载均衡zookeeper,nginx）
垂直拆分 按照不同业务拆分不同机器执行
列如uac 将整个业务划分为交易、用户、会员、优惠券（垂直拆分），同理数据库按业务拆分不同库，mysql（Master和slave）
每个子业务有多台机器集群（水平扩展），同理每个数据库 根据一定规则分表
这时要解决数据一致性 在一致性算法中paxos算法是公认的最好的算法
高并发：短时间大量请求


总结：
原来是一种集中式的服务，所有的业务都在一个应用中。当业务复杂，访问量高时，由于硬件难以提升，
导致机器宕机。
在硬件条件无法满足的情况下 通过
1、垂直拆分 面向业务SOA 一个大的系统按业务分开每个业务有每个业务的机器
2、水平扩展 同一个应用的请求按照一定规则由不同机器来执行
3、垂直拆分+水平扩展 将业务拆分后 每个子业务进行不同机器的集群

问题：数据一致性（例如:用户在领券的时候需要对券余数进行控制）
垂直拆分的问题             不同机器操作同一数据
水平拆分的问题（集群）：   负载均衡
结合项目例如
分布式锁
1、需要对用户的下单操作以及支付操作上锁
原因：用户在页面点击太快两次请求，其实用户只想要一次
2、对积分上锁（数据库悲观锁）
原因：用户在修改积分时会对用户的积分表中这条用户记录上锁，否则其他进程也可对积分进行操作这样会造成幻读
3、定时任务分布式锁（redis）




熔断降级

限流
漏桶算法和令牌桶算法