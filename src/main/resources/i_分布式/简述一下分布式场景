原来是一种集中式的服务，所有的业务都在一个应用中。当业务复杂，访问量高时，由于硬件难以提升，
导致机器宕机。
在硬件条件无法满足的情况下 通过
一、DB层：
分库分表 读写分离
按业务分库，数据量大的表按一定规则分区
比如对userId取模

读写分离（master slave）

问题：分布式事务
CAP理论 一致性、可用性、分区容错性。同时只能满足两个
BASE理论：Basically Available（基本可用）
       Soft state（软状态）
       Eventually consistent（最终一致性）
解决：1、2pc 3pc
      2、TCC补偿事务针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。
        它分为三个阶段 try   confirm cancel
                       冻结  扣除     解冻
      3、本地消息表（异步确保）

二、应用层：
1、垂直拆分 面向业务SOA 一个大的系统按业务分开每个业务有每个业务的机器
2、水平扩展 同一个应用的请求按照一定规则由不同机器来执行
3、垂直拆分+水平扩展 将业务拆分后 每个子业务进行不同机器的集群
数据一致性
不同节点机器时间不同

分布式锁
1、需要对用户的下单操作以及支付操作上锁
原因：用户在页面点击太快两次请求，其实用户只想要一次
2、对积分上锁（数据库悲观锁）
原因：用户在修改积分时会对用户的积分表中这条用户记录上锁，否则其他进程也可对积分进行操作这样会造成幻读
3、定时任务分布式锁（redis）
