背景：
可以保证在分布式部署的应用集群中，同一个方法在同一时间只能被一台机器上的一个线程执行。
这把锁要是一把可重入锁（避免死锁）
这把锁最好是一把阻塞锁（根据业务需求考虑要不要这条）
有高可用的获取锁和释放锁功能
获取锁和释放锁的性能要好

1、基于数据库实现分布式锁

1.1创建一张锁表，定义方法名和调用时间已经调用线程id,对方法名进行唯一性约束，当一个线程插入数据时，其它线程插入失败，表示获得了锁，方法结束后则删除这条记录
1.2基于数据库排他锁 for update (设置不自动提交) 方法执行完之后提交
用while循环插入实现阻塞，

优点：容易理解和实现
缺点：操作数据库开销，锁表不大，数据库为了性能考虑会把查索引改成全表查导致表被锁

2、基于缓存（redis）实现分布式锁
setnx()如果 key 不存在，则设置当前 key 成功，返回 1；如果当前 key 已经存在，则设置当前 key 失败，返回 0。
getset()对 key 设置 newValue 这个值，并且返回 key 原来的旧值
使用步骤：
1、setnx(lockkey, 1) 如果返回 0，则说明占位失败；如果返回 1，则说明占位成功
3、执行完业务代码后，可以通过 delete 命令删除 key。
这样会导致死锁,如果进程1获得锁后机器宕了，此时未释放锁，其它线程则获取不到锁导致死锁
另：
1、setnx(lockkey, 当前时间+过期超时时间)，如果返回 1，则获取锁成功；如果返回 0 则没有获取到锁，转向 2。
2、get(lockkey) 获取值 oldExpireTime ，并将这个 value 值与当前的系统时间进行比较，如果小于当前系统时间，则认为这个锁已经超时，可以允许别的请求重新获取，转向 3。
3、计算 newExpireTime = 当前时间+过期超时时间，然后 getset(lockkey, newExpireTime) 会返回当前 lockkey 的值currentExpireTime。
4、判断 currentExpireTime 与 oldExpireTime 是否相等，如果相等，说明当前 getset 设置成功，获取到了锁。如果不相等，说明这个锁又被别的请求获取走了，那么当前请求可以直接返回失败，或者继续重试。
5、在获取到锁之后，当前线程可以开始自己的业务处理，当处理完毕后，比较自己的处理时间和对于锁设置的超时时间，如果小于锁设置的超时时间，则直接执行 delete 释放锁；如果大于锁设置的超时时间，则不需要再锁进行处理。



3、基于Zookeeper实现分布式锁
上锁改为创建临时有序节点，每个上锁的节点均能创建节点成功，只是其序号不同。只有序号最小的可以拥有锁，如果这个节点序号不是最小的则 watch 序号比本身小的前一个节点 (公平锁)。