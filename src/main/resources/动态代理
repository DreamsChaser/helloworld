业务实现类 负责实现主要的业务方法
业务代理类负责对调用的业务方法作拦截、过滤、预处理

静态代理
通过组合，在代理类中创建一个业务实现类对象来调用具体的业务方法（静态代理类和业务实现类都实现业务接口）
缺点：
1、一个代理类只能对一个业务接口实现类进行代理，多个业务接口必须创建多个代理类
2、所有方法都需要加一些前置处理和后置处理，代码大量冗余

创建代理对象的几个步骤
生成代理类的二进制字节码文件
加载二进制字节码，生成Class对象( 例如使用Class.forName()方法 )
通过反射机制获得实例构造，并创建代理类对象

动态代理
jdk动态代理 底层通过反射实现用proxy.newProxyInstance()
里面通过 getProxyClass0代理类缓存，
如果缓存中有代理类了直接返回，否则将由ProxyClassFactory创建代理类
ProxyGenerate的generateProxyClass(proxyName，interfaces)创建代理类字节码文件，在这里面只将Object的equals toString hashCode方法加入代理方法容器
，然后添加接口中的方法，所以是代理接口并且不能代理实现类中非接口的方法
缺点：只能代理接口

cglib动态代理
底层将方法全部存入一个数组中，通过数组索引直接进行方法调用
当执行代理对象的方法时，会首先判断一下是否存在实现了MethodInterceptor
Enhancer生成代理类
FastClass机制就是对一个类的方法建立索引，通过索引来直接调用相应的方法